export class ApiService {
  constructor() {
    this.baseUrls = {
      quotes: 'https://api.quotable.io',
      weather: 'https://api.openweathermap.org/data/2.5',
      news: 'https://jsonplaceholder.typicode.com',
      advice: 'https://api.adviceslip.com'
    };
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutos
  }

  // M√©todo gen√©rico para hacer peticiones con manejo de errores
  async fetchWithErrorHandling(url, options = {}) {
    try {
      const response = await fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Fetch error:', error);
      throw new Error(`Error al conectar con el servicio: ${error.message}`);
    }
  }

  // Cache helper
  getCachedData(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
    return null;
  }

  setCachedData(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  // Obtener citas inspiracionales para la p√°gina de inicio
  async getInspirationalQuote() {
    const cacheKey = 'inspirational_quote';
    const cached = this.getCachedData(cacheKey);
    if (cached) return cached;

    try {
      const data = await this.fetchWithErrorHandling(
        `${this.baseUrls.quotes}/random?tags=inspirational|motivational|success`
      );
      
      const quote = {
        text: data.content,
        author: data.author,
        tags: data.tags
      };
      
      this.setCachedData(cacheKey, quote);
      return quote;
    } catch (error) {
      // Fallback quote si la API falla
      return {
        text: "Una sonrisa es la curva m√°s hermosa en el cuerpo de una persona.",
        author: "An√≥nimo",
        tags: ["sonrisa", "belleza"]
      };
    }
  }

  // Obtener consejos de salud dental
  async getHealthAdvice() {
    const cacheKey = 'health_advice';
    const cached = this.getCachedData(cacheKey);
    if (cached) return cached;

    try {
      const data = await this.fetchWithErrorHandling(
        `${this.baseUrls.advice}/advice`
      );
      
      const advice = {
        id: data.slip.id,
        text: data.slip.advice,
        category: 'general'
      };
      
      this.setCachedData(cacheKey, advice);
      return advice;
    } catch (error) {
      // Fallback advice espec√≠fico para salud dental
      const dentalAdvices = [
        "Cep√≠llate los dientes al menos dos veces al d√≠a con pasta dental con fl√∫or.",
        "Usa hilo dental diariamente para eliminar la placa entre los dientes.",
        "Visita a tu dentista regularmente para chequeos y limpiezas profesionales.",
        "Limita el consumo de az√∫car y alimentos √°cidos para proteger el esmalte dental.",
        "Bebe mucha agua para mantener tu boca hidratada y eliminar bacterias."
      ];
      
      return {
        id: Math.floor(Math.random() * 1000),
        text: dentalAdvices[Math.floor(Math.random() * dentalAdvices.length)],
        category: 'dental'
      };
    }
  }

  // Obtener noticias relacionadas con salud (simulado con JSONPlaceholder)
  async getHealthNews(limit = 5) {
    const cacheKey = `health_news_${limit}`;
    const cached = this.getCachedData(cacheKey);
    if (cached) return cached;

    try {
      const data = await this.fetchWithErrorHandling(
        `${this.baseUrls.news}/posts?_limit=${limit}`
      );
      
      const news = data.map(post => ({
        id: post.id,
        title: this.adaptTitleToHealth(post.title),
        summary: this.adaptBodyToHealth(post.body),
        date: new Date().toISOString().split('T')[0],
        category: 'salud'
      }));
      
      this.setCachedData(cacheKey, news);
      return news;
    } catch (error) {
      // Fallback news
      return [
        {
          id: 1,
          title: "Nuevas t√©cnicas en implantolog√≠a dental",
          summary: "Los avances en implantolog√≠a permiten tratamientos m√°s r√°pidos y efectivos.",
          date: new Date().toISOString().split('T')[0],
          category: 'innovaci√≥n'
        },
        {
          id: 2,
          title: "Importancia de la salud bucal en la salud general",
          summary: "Estudios demuestran la conexi√≥n entre la salud oral y enfermedades cardiovasculares.",
          date: new Date().toISOString().split('T')[0],
          category: 'investigaci√≥n'
        }
      ];
    }
  }

  // Simular API de disponibilidad de citas
  async getAvailableAppointments(date) {
    // Simular delay de red
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const appointments = [];
    const startHour = 9;
    const endHour = 18;
    const selectedDate = new Date(date);
    
    // Generar horarios disponibles (simulado)
    for (let hour = startHour; hour < endHour; hour++) {
      for (let minute of [0, 30]) {
        const isAvailable = Math.random() > 0.3; // 70% de probabilidad de estar disponible
        if (isAvailable) {
          appointments.push({
            time: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,
            available: true,
            doctor: this.getRandomDoctor()
          });
        }
      }
    }
    
    return appointments;
  }

  // Simular env√≠o de formulario de cita
  async submitAppointment(appointmentData) {
    // Simular delay de red
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Simular posible error (5% de probabilidad)
    if (Math.random() < 0.05) {
      throw new Error('Error al procesar la cita. Por favor, int√©ntalo de nuevo.');
    }
    
    return {
      success: true,
      appointmentId: `CITA-${Date.now()}`,
      confirmationCode: Math.random().toString(36).substr(2, 8).toUpperCase(),
      message: 'Cita agendada exitosamente',
      data: {
        ...appointmentData,
        status: 'confirmada',
        createdAt: new Date().toISOString()
      }
    };
  }

  // Obtener informaci√≥n del clima (para mostrar en la p√°gina)
  async getWeatherInfo(city = 'Madrid') {
    const cacheKey = `weather_${city}`;
    const cached = this.getCachedData(cacheKey);
    if (cached) return cached;

    try {
      // Nota: En producci√≥n necesitar√≠as una API key real
      // const data = await this.fetchWithErrorHandling(
      //   `${this.baseUrls.weather}/weather?q=${city}&appid=YOUR_API_KEY&units=metric&lang=es`
      // );
      
      // Simulamos datos del clima
      const weatherData = {
        city: city,
        temperature: Math.floor(Math.random() * 25) + 10, // 10-35¬∞C
        description: ['Soleado', 'Parcialmente nublado', 'Nublado', 'Lluvia ligera'][Math.floor(Math.random() * 4)],
        humidity: Math.floor(Math.random() * 40) + 40, // 40-80%
        icon: '‚òÄÔ∏è'
      };
      
      this.setCachedData(cacheKey, weatherData);
      return weatherData;
    } catch (error) {
      return {
        city: city,
        temperature: 22,
        description: 'Informaci√≥n no disponible',
        humidity: 60,
        icon: 'üå§Ô∏è'
      };
    }
  }

  // Helpers
  adaptTitleToHealth(title) {
    const healthKeywords = [
      'Avances en odontolog√≠a moderna',
      'Nuevas t√©cnicas de blanqueamiento dental',
      'Importancia de la higiene bucal',
      'Innovaciones en ortodoncia',
      'Prevenci√≥n de enfermedades dentales'
    ];
    return healthKeywords[Math.floor(Math.random() * healthKeywords.length)];
  }

  adaptBodyToHealth(body) {
    const healthSummaries = [
      'Los √∫ltimos avances en tecnolog√≠a dental permiten tratamientos m√°s eficaces y c√≥modos.',
      'La prevenci√≥n sigue siendo la mejor estrategia para mantener una salud bucal √≥ptima.',
      'Nuevos estudios revelan la importancia de la salud oral en el bienestar general.',
      'Las t√©cnicas m√≠nimamente invasivas revolucionan los tratamientos dentales.',
      'La educaci√≥n del paciente es clave para el √©xito de cualquier tratamiento dental.'
    ];
    return healthSummaries[Math.floor(Math.random() * healthSummaries.length)];
  }

  getRandomDoctor() {
    const doctors = [
      'Dr. Garc√≠a',
      'Dra. Mart√≠nez',
      'Dr. L√≥pez',
      'Dra. Rodr√≠guez',
      'Dr. Fern√°ndez'
    ];
    return doctors[Math.floor(Math.random() * doctors.length)];
  }

  // Limpiar cache
  clearCache() {
    this.cache.clear();
  }

  // Obtener estad√≠sticas de uso de la API
  getApiStats() {
    return {
      cacheSize: this.cache.size,
      cacheKeys: Array.from(this.cache.keys()),
      lastUpdate: new Date().toISOString()
    };
  }
}

// Instancia singleton
export const apiService = new ApiService();